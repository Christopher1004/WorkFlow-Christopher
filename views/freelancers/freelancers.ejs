<!DOCTYPE html>
<html lang="pt-BR">
<head>
  <meta charset="UTF-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>Freelancers</title>
  <link rel="stylesheet" href="/css/freelancers/freelancers.css" />
</head>
<body>
  <section class="section-1 pd-t-2 pd-x-2">
    <div class="pd-2 bg-gray-75 flex flex-row gap-2 rounded-md mg-0 flex-wrap justify-center items-center">
      <!-- Category Dropdown -->
      <div class="category sm:w-full" style="min-width: 200px;">
        <div class="dropdown w-full">
          <button class="dropdown-btn form-control sm">Categoria</button>
          <div class="dropdown-content">
            <input type="text" placeholder="Buscar categoria..." oninput="filtrarCategorias(this)">
            <ul id="lista-categorias">
              <li>Design de apps</li>
              <li>Design de interface</li>
              <li>Design de web</li>
              <li>Design de poster</li>
              <li>Social Media</li>
              <li>Artista</li>
              <li>Design gráfico</li>
              <li>Design de UI</li>
              <li>Design de UX</li>
            </ul>
          </div>
        </div>
      </div>

      <!-- Filter Select -->
      <select id="filtro-ordenacao" class="select-filter sm">
        <option value="" selected>
          <span>nenhum</span>
        </option>
        <option value="curtidas">
          <span>Mais Curtidas</span>
        </option>
        <option value="projetos">
          <span>Mais Projetos</span>
        </option>
        <option value="propostas">
          <span>Mais Propostas</span>
        </option>
      </select>
    </div>
    <div class="freelancers-grid"></div>
  </section>

  <script type="module">
    import { initializeApp, getApps } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getDatabase, ref, get, child } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-database.js";

    const firebaseConfig = {
      apiKey: "AIzaSyAAtfGyZc3SLzdK10zdq-ALyTyIs1s4qwQ",
      authDomain: "workflow-da28d.firebaseapp.com",
      databaseURL: "https://workflow-da28d-default-rtdb.firebaseio.com",
      projectId: "workflow-da28d",
      storageBucket: "workflow-da28d.appspot.com",
      messagingSenderId: "939828605253",
      appId: "1:939828605253:web:0a286fe00f1c29ba614e2c",
      measurementId: "G-3LXB7BR5M1"
    };

    const app = !getApps().length ? initializeApp(firebaseConfig) : getApps()[0];
    const db = getDatabase(app);

    const grid = document.querySelector('.freelancers-grid');
    const anonymousAvatar = "https://cdn-icons-png.flaticon.com/512/149/149071.png";
    const selectOrdenacao = document.getElementById('filtro-ordenacao');

    function criarCard({ nome, bio, foto_perfil, banner, curtidas = 0, projetos = 0, propostas = 0 }, id, temCoroa = false) {
      const foto = foto_perfil && foto_perfil.trim() !== '' ? foto_perfil : anonymousAvatar;
      const card = document.createElement('div');
      card.className = 'freelancer-card';
      card.innerHTML = `
        <div class="card-content bg-gray-75 rounded-2xl w-full border border-solid border-gray-50">
          <div class="banner bg-gray-100 rounded-2xl w-full h-full" style="height: 150px; background-position: center; background-image: url('${banner || ''}'); background-size: cover;">
          </div>
          <div class="w-full items-center flex pd-3 flex-col" style="margin-top: -50px">
            <div class="profile-pic flex items-center border-4 border-solid border-gray-75 rounded-full overflow-hidden" style="width: 100px; height: 100px;">
              <img src="${foto}" alt="Foto de perfil" onerror="this.src='${anonymousAvatar}'" class="w-full h-full" style="object-fit: cover;">
            </div>
          </div>
          <div class="info w-full flex flex-col items-center gap-3 pd-4" style="margin-top: -40px;">
            <div class="name pd-1 bg-gray-100 rounded-xl border-2 border-solid border-gray-50 text-white text-sm">${nome || 'Sem nome'}</div>
            <div class="bio text-gray-25 text-sm">${bio || 'Sem biografia disponível.'}</div>
            <div class="stats flex gap-1 justify-between w-full">
              <div class="stat-item pd-2 flex-1 rounded-md flex-col bg-gray-100 border border-solid border-gray-50 flex items-center text-white">
                <span class="text-lg font-bold">${curtidas}</span>
                <span class="text-xs text-gray-25">CURTIDAS</span>
              </div>
              <div class="stat-item pd-2 flex-1 rounded-md flex-col bg-gray-100 border border-solid border-gray-50 flex items-center text-white">
                <span class="text-lg font-bold">${projetos}</span>
                <span class="text-xs text-gray-25">PROJETOS</span>
              </div>
              <div class="stat-item pd-2 flex-1 rounded-md flex-col bg-gray-100 border border-solid border-gray-50 flex items-center text-white">
                <span class="text-lg font-bold">${propostas}</span>
                <span class="text-xs text-gray-25">PROPOSTAS</span>
              </div>
            </div>
          </div>
        </div>
      `;
      card.style.cursor = 'pointer';
      card.addEventListener('click', () => {
        window.location.href = `/perfil?id=${id}`;
      });
      return card;
    }

    async function carregarFreelancers(filtroNome = "", ordenacao = "") {
      try {
        const dbRef = ref(db);
        const [freelancersSnap, projetosSnap, propostasSnap, curtidasSnap] = await Promise.all([
          get(child(dbRef, 'Freelancer')),
          get(child(dbRef, 'Projetos')),
          get(child(dbRef, 'Propostas')),
          get(child(dbRef, 'Curtidas'))
        ]);

        if (!freelancersSnap.exists()) {
          grid.innerHTML = '<p>Nenhum freelancer encontrado.</p>';
          return;
        }

        const freelancers = freelancersSnap.val();
        const projetos = projetosSnap.exists() ? projetosSnap.val() : {};
        const propostas = propostasSnap.exists() ? propostasSnap.val() : {};
        const curtidas = curtidasSnap.exists() ? curtidasSnap.val() : {};

        grid.innerHTML = '';

        const listaFreelancers = [];

        Object.entries(freelancers).forEach(([freelancerId, freelancer]) => {
          const nome = (freelancer.nome || "").toLowerCase();
          if (filtroNome && !nome.includes(filtroNome.toLowerCase())) return;

          const projetosDoFreelancer = Object.entries(projetos).filter(([_, p]) => p.userId === freelancerId);
          const propostasDoFreelancer = Object.values(propostas).filter(p => p.autorId === freelancerId);

          let totalCurtidasCount = 0;
          projetosDoFreelancer.forEach(([projId]) => {
            if (curtidas[projId]) {
              totalCurtidasCount += Object.keys(curtidas[projId]).length;
            }
          });

          listaFreelancers.push({
            id: freelancerId,
            dados: freelancer,
            curtidas: totalCurtidasCount,
            projetos: projetosDoFreelancer.length,
            propostas: propostasDoFreelancer.length
          });
        });

        if (ordenacao) {
          listaFreelancers.sort((a, b) => {
            if (ordenacao === "curtidas") {
              if (b.curtidas !== a.curtidas) return b.curtidas - a.curtidas;
              if (b.projetos !== a.projetos) return b.projetos - a.projetos;
              return b.propostas - a.propostas;
            }
            if (ordenacao === "projetos") {
              if (b.projetos !== a.projetos) return b.projetos - a.projetos;
              if (b.curtidas !== a.curtidas) return b.curtidas - a.curtidas;
              return b.propostas - a.propostas;
            }
            if (ordenacao === "propostas") {
              if (b.propostas !== a.propostas) return b.propostas - a.propostas;
              if (b.curtidas !== a.curtidas) return b.curtidas - a.curtidas;
              return b.projetos - a.projetos;
            }
            return 0;
          });
        }

        const maisDestacado = listaFreelancers.reduce((max, f) => {
          if (!max) return f;
          if (f.curtidas > max.curtidas) return f;
          if (f.curtidas === max.curtidas && f.projetos > max.projetos) return f;
          return max;
        }, null);

        listaFreelancers.forEach(f => {
          const card = criarCard(
            {
              ...f.dados,
              curtidas: f.curtidas,
              projetos: f.projetos,
              propostas: f.propostas
            },
            f.id,
            f.id === (maisDestacado ? maisDestacado.id : null)
          );
          grid.appendChild(card);
        });

        if (!grid.hasChildNodes()) {
          grid.innerHTML = '<p>Nenhum freelancer encontrado com esse nome.</p>';
        }

      } catch (error) {
        console.error('Erro ao carregar freelancers:', error);
        grid.innerHTML = '<p>Erro ao carregar freelancers.</p>';
      }
    }

    document.addEventListener('DOMContentLoaded', () => {
      const inputBusca = document.querySelector('.searchbar-input');
      const params = new URLSearchParams(window.location.search);
      const busca = params.get('busca');
      if (inputBusca && busca) inputBusca.value = busca;

      function recarregar() {
        const ordenacao = selectOrdenacao.value;
        const filtroNome = inputBusca ? inputBusca.value.trim().toLowerCase() : "";
        carregarFreelancers(filtroNome, ordenacao);
      }

      selectOrdenacao.addEventListener('change', recarregar);

      if (inputBusca) {
        inputBusca.addEventListener('input', recarregar);
      }

      recarregar();
    });
  </script>
  <script>
    function filtrarCategorias(input) {
      const filtro = input.value.toLowerCase();
      const categorias = document.querySelectorAll('#lista-categorias li');
      categorias.forEach(categoria => {
        const texto = categoria.textContent.toLowerCase();
        categoria.style.display = texto.includes(filtro) ? '' : 'none';
      });
    }

    document.querySelector('.dropdown-btn').addEventListener('click', function () {
      this.parentElement.classList.toggle('open');
    });

    document.addEventListener('click', function (e) {
      if (!e.target.closest('.dropdown')) {
        document.querySelectorAll('.dropdown').forEach(dropdown => dropdown.classList.remove('open'));
      }
    });
  </script>
</body>
</html>
